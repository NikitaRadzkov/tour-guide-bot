package bot

import (
	"fmt"
	"log"
	"tour-guide-bot/internal/commands"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Bot struct {
	bot *tgbotapi.BotAPI
	channelName string
	guideUrl string
}

func NewBot(token, channelName, guideUrl string) (*Bot, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, err
	}

	return &Bot{
		bot: bot,
		channelName: channelName,
		guideUrl: guideUrl,
	}, nil
}

func (b *Bot) Start() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.bot.GetUpdatesChan(u)

	log.Println("Bot is running...")

	for update := range updates {
		if update.Message != nil {
			switch update.Message.Text {
			case commands.Start:
				b.handleStart(update.Message)
			case commands.Confirm:
				b.handleConfirmation(update.Message)
			default:
				b.handleUnknownCommand(update.Message)
			}
		}
	}
}

func (b *Bot) handleStart(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! üëã\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –º–æ–∏ –ª—É—á—à–∏–µ –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ù–∞—á–∞—Ç—å¬ª, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å! ‚¨áÔ∏è")
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ù–∞—á–∞—Ç—å"),
		),
	)
	b.bot.Send(msg)
}

func (b *Bot) handleConfirmation(message *tgbotapi.Message) {
	isSubscribed, err := b.isUserSubscribed(message.Chat.ID)
	if err != nil {
		log.Printf("Failed to check subscribe: %v", err)
		return
	}

	if isSubscribed {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–û—Ç–ª–∏—á–Ω–æ! üéâ\n–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã, –∏ —Ç–µ–ø–µ—Ä—å –≥–∞–π–¥ –≤–∞—à! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –µ–≥–æ –∏ –Ω–∞—á–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ. ‚úàÔ∏è")

		inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonURL("–°–∫–∞—á–∞—Ç—å –≥–∞–π–¥", b.guideUrl),
			),
		)

		msg.ReplyMarkup = inlineKeyboard

		if _, err := b.bot.Send(msg); err != nil {
			log.Printf("Failed to send message: %v\n", err)
		}
} else {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥.")
		b.bot.Send(msg)
	}
}


func (b *Bot) isUserSubscribed(userID int64) (bool, error) {
	chatID , err := b.getChatIDByUsername(b.channelName)
	if err != nil {
		return false, fmt.Errorf("failed to get ChatID: %v", err)
	}


	chatMember, err := b.bot.GetChatMember(tgbotapi.GetChatMemberConfig{
		ChatConfigWithUser: tgbotapi.ChatConfigWithUser{
			ChatID: chatID,
			UserID: userID,
		},
	})
	if err != nil {
		return false, err
	}

	return chatMember.IsMember || chatMember.IsAdministrator() || chatMember.IsCreator(), nil
}

func (b *Bot) getChatIDByUsername(username string) (int64, error) {
	chat, err := b.bot.GetChat(tgbotapi.ChatInfoConfig{
		ChatConfig: tgbotapi.ChatConfig{
			SuperGroupUsername: username,
		},
	})
	if err != nil {
		return 0, err
	}
	return chat.ID, nil
}

func (b *Bot) handleUnknownCommand(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
	b.bot.Send(msg)
}
