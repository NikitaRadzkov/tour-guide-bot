package bot

import (
	"fmt"
	"log"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Bot struct {
	bot         *tgbotapi.BotAPI
	channelName string
	guideUrl    string
	topDealsUrl string
	checklistUrl string
	searchUrl   string
	aboutUrl    string
	contactUser string
}

func NewBot(token, channelName, guideUrl, topDealsUrl, checklistUrl, searchUrl, aboutUrl, contactUser string) (*Bot, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, err
	}

	return &Bot{
		bot:         bot,
		channelName: channelName,
		guideUrl:    guideUrl,
		topDealsUrl: topDealsUrl,
		checklistUrl: checklistUrl,
		searchUrl:   searchUrl,
		aboutUrl:    aboutUrl,
		contactUser: contactUser,
	}, nil
}

func (b *Bot) Start() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.bot.GetUpdatesChan(u)

	log.Println("Bot is running...")

	for update := range updates {
		if update.Message != nil {
			if update.Message.IsCommand() {
				switch update.Message.Command() {
				case "start":
					b.handleStart(update.Message)
				default:
					b.handleUnknownCommand(update.Message)
				}
			} else {
				b.handleTextMessage(update.Message)
			}
		} else if update.CallbackQuery != nil {
			b.handleCallbackQuery(update.CallbackQuery)
		}
	}
}

func (b *Bot) handleStart(message *tgbotapi.Message) {
	text := `–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –í–µ—Ä—ã –ê–≥–µ–µ–Ω–∫–æ–≤–æ–π ‚ú®

–û—Ä–≥–∞–Ω–∏–∑—É—é –≤–∞—à –æ—Ç–¥—ã—Ö ¬´–∫–∞–∫ –Ω–∞ –æ–±–ª–∞—á–∫–µ¬ª –≤ –ª—É—á—à–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ ¬´—Ü–µ–Ω–∞-–∫–∞—á–µ—Å—Ç–≤–æ¬ª.
–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–±—Ä–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π üéÅ, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å üîù –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç—É—Ä –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –ª–∏—á–Ω–æ.

–í—ã–±–∏—Ä–∞–π –Ω–∏–∂–µ üëá`

	msg := tgbotapi.NewMessage(message.Chat.ID, text)

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üéÅ –ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìã –ß–µ–∫-–ª–∏—Å—Ç –Ω–∞ –ø–æ–¥–±–æ—Ä —Ç—É—Ä–∞"),
			tgbotapi.NewKeyboardButton("üîé –ü–æ–∏—Å–∫ —Ç—É—Ä–∞"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ÑπÔ∏è –û–±–æ –º–Ω–µ"),
			tgbotapi.NewKeyboardButton("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π"),
		),
	)

	keyboard.OneTimeKeyboard = false
	keyboard.ResizeKeyboard = true

	msg.ReplyMarkup = keyboard
	b.bot.Send(msg)
}

func (b *Bot) handleTextMessage(message *tgbotapi.Message) {
	switch message.Text {
	case "üéÅ –ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫":
		b.handleGift(message)
	case "üìã –ß–µ–∫-–ª–∏—Å—Ç –Ω–∞ –ø–æ–¥–±–æ—Ä —Ç—É—Ä–∞":
		b.handleChecklist(message)
	case "üîé –ü–æ–∏—Å–∫ —Ç—É—Ä–∞":
		b.handleSearch(message)
	case "‚ÑπÔ∏è –û–±–æ –º–Ω–µ":
		b.handleAbout(message)
	case "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π":
		b.handleContact(message)
	default:
		b.handleUnknownCommand(message)
	}
}

func (b *Bot) handleCallbackQuery(callbackQuery *tgbotapi.CallbackQuery) {
	switch callbackQuery.Data {
	case "check_subscription":
		b.handleSubscriptionCheck(callbackQuery)
	default:
		log.Printf("Unknown callback data: %s\n", callbackQuery.Data)
	}

	callback := tgbotapi.NewCallback(callbackQuery.ID, "")
	if _, err := b.bot.Request(callback); err != nil {
		log.Printf("Failed to answer callback: %v\n", err)
	}
}

func (b *Bot) handleGift(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "")

	isSubscribed, err := b.isUserSubscribed(message.From.ID)
	if err != nil {
		log.Printf("Failed to check subscription: %v", err)
		msg.Text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
		b.bot.Send(msg)
		return
	}

	if isSubscribed {
		msg.Text = "üéâ –û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç —Ç–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫."
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonURL("üì• –°–∫–∞—á–∞—Ç—å –≥–∞–π–¥", b.guideUrl),
			),
		)
		msg.ReplyMarkup = keyboard
	} else {
		msg.Text = "–£–≤—ã, —è –Ω–µ –≤–∏–∂—É —Ç–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É."
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonURL("üîÑ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", fmt.Sprintf("https://t.me/%s", strings.TrimPrefix(b.channelName, "@"))),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", "check_subscription"),
			),
		)
		msg.ReplyMarkup = keyboard
	}

	b.bot.Send(msg)
}

func (b *Bot) handleTopDeals(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "")

	isSubscribed, err := b.isUserSubscribed(message.From.ID)
	if err != nil {
		log.Printf("Failed to check subscription: %v", err)
		msg.Text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
		b.bot.Send(msg)
		return
	}

	if isSubscribed {
		msg.Text = "üîù –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏, –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã—Ö –ª–∏—á–Ω–æ –º–Ω–æ–π:"
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonURL("üëâ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", b.topDealsUrl),
			),
		)
		msg.ReplyMarkup = keyboard
	} else {
		msg.Text = "–£–≤—ã, —è –Ω–µ –≤–∏–∂—É —Ç–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É."
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonURL("üîÑ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", fmt.Sprintf("https://t.me/%s", strings.TrimPrefix(b.channelName, "@"))),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", "check_subscription"),
			),
		)
		msg.ReplyMarkup = keyboard
	}

	b.bot.Send(msg)
}

func (b *Bot) handleChecklist(message *tgbotapi.Message) {
	text := `–ï—Å–ª–∏ –≤—ã —Ü–µ–Ω–∏—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –¥–µ—Ç–∞–ª—è–º, –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω—ã –∫–∞—á–µ—Å—Ç–≤–æ –∏ –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–µ—Ä–≤–∏—Å–∞

–ó–∞–ø–æ–ª–Ω–∏ —á–µ–∫-–ª–∏—Å—Ç –Ω–∞ –ø–æ–¥–±–æ—Ä —Ç—É—Ä–∞ ‚Äî –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–º–µ–Ω–Ω–æ –≤–∞–º.`

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("‚úÖ –ó–∞–ø–æ–ª–Ω–∏—Ç—å", b.checklistUrl),
		),
	)
	msg.ReplyMarkup = keyboard
	b.bot.Send(msg)
}

func (b *Bot) handleSearch(message *tgbotapi.Message) {
	text := `üèñ –ï—Å–ª–∏ –≤—ã –ª—é–±–∏—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏–ª–∏ —É–∂–µ –∑–Ω–∞–µ—Ç–µ –æ—Ç–µ–ª—å ‚Äî –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ–æ—Ä–º–æ–π –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–∞ –Ω–∞ —Å–∞–π—Ç–µ:

1. –í—ã–±–∏—Ä–∞–π —Ç—É—Ä
2. –ù–∞–ø–∏—à–∏ –º–Ω–µ –¥–µ—Ç–∞–ª–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
3. –ú—ã –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—É –∏ –Ω–∞–ª–∏—á–∏–µ –º–µ—Å—Ç –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä—É–µ–º –æ—Ç–¥—ã—Ö`

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("üîé –ò—Å–∫–∞—Ç—å —Ç—É—Ä", b.searchUrl),
		),
	)
	msg.ReplyMarkup = keyboard
	b.bot.Send(msg)
}

func (b *Bot) handleAbout(message *tgbotapi.Message) {
	text := `üë©‚Äçüíº –ú–µ–Ω—è –∑–æ–≤—É—Ç –í–µ—Ä–∞ –ê–≥–µ–µ–Ω–∫–æ–≤–∞.
–Ø —Ç—É—Ä–∞–≥–µ–Ω—Ç, —ç–∫—Å–ø–µ—Ä—Ç —Å 12-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º, —Ç–∞, –∫—Ç–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –≤–∞—à–∏ –º–µ—á—Ç—ã –≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ–ª–∞–µ—Ç ¬´–∫–æ–Ω—Ñ–µ—Ç–∫—É¬ª –∏–∑ –≤–∞—à–∏—Ö ¬´—Ö–æ—á—É¬ª.

üåç–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–±–æ –º–Ω–µ –∏ —á—Ç–æ —è –¥–µ–ª–∞—é –¥–ª—è –≤–∞—Å ‚Äî –Ω–∞ —Å–∞–π—Ç–µ.`

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("–£–∑–Ω–∞—Ç—å", b.aboutUrl),
		),
	)
	msg.ReplyMarkup = keyboard
	b.bot.Send(msg)
}

func (b *Bot) handleContact(message *tgbotapi.Message) {
	text := `üì© –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏ –ø—Ä—è–º–æ –º–Ω–µ –≤ Telegram ‚Äî —è –Ω–∞ —Å–≤—è–∑–∏!`

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("üëâ –ù–∞–ø–∏—Å–∞—Ç—å", fmt.Sprintf("https://t.me/%s", strings.TrimPrefix(b.contactUser, "@"))),
		),
	)
	msg.ReplyMarkup = keyboard
	b.bot.Send(msg)
}

func (b *Bot) handleSubscriptionCheck(callbackQuery *tgbotapi.CallbackQuery) {
	isSubscribed, err := b.isUserSubscribed(callbackQuery.From.ID)
	if err != nil {
		log.Printf("Failed to check subscription: %v", err)
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		b.bot.Send(msg)
		return
	}

	if isSubscribed {
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω, –≤–æ—Ç —Ç–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫!")
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonURL("üì• –°–∫–∞—á–∞—Ç—å –≥–∞–π–¥", b.guideUrl),
			),
		)
		msg.ReplyMarkup = keyboard
		b.bot.Send(msg)
	} else {
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonURL("üîÑ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", fmt.Sprintf("https://t.me/%s", strings.TrimPrefix(b.channelName, "@"))),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", "check_subscription"),
			),
		)
		msg.ReplyMarkup = keyboard
		b.bot.Send(msg)
	}
}

func (b *Bot) isUserSubscribed(userID int64) (bool, error) {
	chatID, err := b.getChatIDByUsername(b.channelName)
	if err != nil {
		return false, fmt.Errorf("failed to get chat ID: %v", err)
	}

	chatMember, err := b.bot.GetChatMember(tgbotapi.GetChatMemberConfig{
		ChatConfigWithUser: tgbotapi.ChatConfigWithUser{
			ChatID: chatID,
			UserID: userID,
		},
	})
	if err != nil {
		return false, err
	}

	return chatMember.Status == "member" ||
	       chatMember.Status == "administrator" ||
	       chatMember.Status == "creator", nil
}

func (b *Bot) getChatIDByUsername(username string) (int64, error) {
	chat, err := b.bot.GetChat(tgbotapi.ChatInfoConfig{
		ChatConfig: tgbotapi.ChatConfig{
			SuperGroupUsername: username,
		},
	})
	if err != nil {
		return 0, err
	}
	return chat.ID, nil
}

func (b *Bot) handleUnknownCommand(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
	b.bot.Send(msg)
}
